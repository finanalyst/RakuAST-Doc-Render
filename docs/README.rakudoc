=begin rakudoc :type<fundamental>
=TITLE RakuDoc renderer

=SUBTITLE Renders RakuDoc sources into an output format dependent on templates
=for AUTHOR :hidden
Richard Hainsworth aka finanalyst

=for VERSION :hidden
v0.4.0

=begin SYNOPSIS
=item Clone the repository and submoeule.
=item2 C<git clone https://github.com/finanalyst/rakuast-rakudoc-render.git>
=item Give the repository a shorter name.
=item2 C<mv rakuast-rakudoc-render rrr>
=itenm Update the submodule.
=item2 C<cd rrr && git submodule init>
=item2 C<git submodule update>
=item Install using zef as follows (flag is important)
=item2 C<zef install . -/precompile-install>

Note that C<zef> runs the tests in C<t/>, and those cause compilation of the
modules in the distribution.
=end SYNOPSIS

=head Overview

This distribution is intended to provide several renderers from RakuDoc v2 into commonly used
output formats.

The basic render engine is C<RakuDoc::Render>, which renders a RakuDoc source into text for display on a terminal.

The Renderer class is designed to be extended to other output formats by subclassing.

This is software using bleeding edge Rakudo, so look L<at troubleshooting below|#Troubleshooting>.

Using the I<Generic> renderer, the B<canonical method> for generating rendered text is possible
(which sends output to STDOUT, so pipe to a file), namely
=code   RAKUDO_RAKUAST=1 raku --rakudoc=Generic rakudociem-ipsum.rakudoc > store-output

Some L<naive wrapping and width modification|#Wrapping> is possible using environment variables.

The file L<rakudociem-ipsum.rakudoc|https://github.com/Raku/RakuDoc-GAMMA/blob/main/rakudociem-ipsum.rakudoc>
is the file for testing RakuDoc v2 compliance. It can be obtained with:
=code   bin/get-compliance-document

A copy of C<rakudociem-ipsum.rakudoc> is also contained in C<resources/compliance-rendering>, together with
renderings of the file using the output renderers in this distribution.

In order to avoid environment variables, eg for Windows, a RakuDoc file can be rendered
to Text using the L<RenderTextify|#RenderTextify utility>. It
avoids some installation problems, stores the output and offers some other output options, eg.
=code bin/RenderTextify rakudociem-ipsum

(the .rakudoc extension may be omitted if desired)

Rendering into the other output formats provided in this distribution can be done using
L<RenderDocs|#RenderDocs utility>. By default, sources are located in C<docs/> and rendered
to the current working directory into MarkDown, eg.,
=code bin/RenderDocs README

=head Documentation

All documentation can be found at L<finanalyst.github.io| https://finanalyst.github.io>.

The two main documentation sources are:
=item L<An overview of the generic renderer|https://finanalyst.github.io/Render>
=item L<The templating system|https://finanalyst.github.io/Templates>

=head RenderTextify utility

The utility C<bin/RenderTexify> can be called with a RakuDoc source and it saves the
result directly to a file, rather than to STDOUT.

For example,
=code bin/RenderTextify rakudociem-ipsum

will produce the file
=code rakudociem-ipsum.rakudoc.text

The executable C<bin/RenderTexify> can also be called with the flags C<test> and C<pretty>
and the name of a file to render. The use case of these options is to see what templates
receive from the rendering engine when developing new templates.

The file is output to text files with the flag and C<.text>
appended to the name. The file format C<.rakudoc> is assumed, and added if missing.

For example,
=code bin/RenderTextify --pretty rakudociem-ipsum

will produce the file
=code rakudociem-ipsum.rakudoc.pretty.text

=head Wrapping

The text output will be naively wrapped (the algorithm is still being developed), either
by setting the environment variable POSTPROCESSING=1 or using RenderTextify.
For example,
=code POSTPROCESSING=1 RAKUDO_RAKUAST=1 raku --rakudoc=Generic doc.rakudoc > store-output

or
=code bin/RenderTextify --post-processing doc

If the environment variable WIDTH (--width) is also set, the text output will be
wrapped to the value. WIDTH by default is set at 80 chars. To set at 70, use:
=code POSTPROCESSING=1 WIDTH=70 RAKUDO_RAKUAST=1 raku --rakudoc=Generic doc.rakudoc > store-output

or
=code bin/RenderTextify --post-processing --width=70 doc

The utility can also be used for debugging new templates. For more information, see the
Render and Templates documents. To get all the debugging information, and information on
the template for C<C-markup> try
=code bin/RenderTextify --debug='All' --verbose='C-markup' doc

=head RenderDocs utility

I<RenderDoc> is similar to RenderTextify, but uses the other formats in this distribution, namely
=item B<.md> - Markdown (default)
=item B<-singlefile.html> - HTML that can be opened directly in a browser without internet connection.
=item B<.html> - HTML that is intended for use with an internet connection

By default, the utility renders all the I<rakudoc> sources from C<docs/> and outputs them in
I<markdown> to the current working directory, eg.
=code bin/RenderDocs

In order to get the useage try
=code bin/RenderDocs -h

In order to render a single file, put the basename without I<.rakudoc> as a string parameter, eg.
=code bin/RenderDocs README

In order to override the source and output defaults use C<--src> and C<--to> options, eg.
=code bin/RenderDocs --src='sources/' --to='rendered/' some-file

In order to get single file HTML, rather than markdown
=code bin/Render --to='rendered' --html README

In order to get the possibilities offered by RakuDoc::To::HTML-Extra, including maps, graphs, themes
and the Bulma CSS framework, use C<--html> and C<--extra>, eg.
=code bin/Render --html --extra Graphviz

The B<html> variants allow for C<--debug> and C<--verbose>.

=head1 Troubleshooting

In order to get the RakuDoc render test file (rakudociem-ipsum) to work, a recent
version of the Rakudoc compiler is needed, after v2024.07.

If the cannonical command above fails, perhaps with a message such as
=code     ===SORRY!===
    This element has not been resolved. Type: RakuAST::Type::Simple

or
=begin code
Out-of-sync package detected in LANG1 at r => Str=｢{ $!front-matter }｣

  (value in braid: RakuAST::Class, value in $*PACKAGE: RakuAST::Class)
===SORRY!===
No such method 'IMPL-REGEX-QAST' for invocant of type 'RakuAST::Regex'
=end code

then try
=code bin/force-compile

This deletes the C<.precomp> files in the current directory, and runs C<prove6 -I.>,
which causes a recompilation of all the modules.

=place semantic:AUTHOR :caption<Credits>

=place semantic:VERSION :!toc

=end rakudoc
